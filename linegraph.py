# -*- coding: utf-8 -*-
"""연도별전기차충전기수.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cw5_qtUERSTyW7FnNEzfj1qOZwv-SREY
"""

from google.colab import drive
drive.mount('/content/drive')

# 나눔고딕 폰트 설치 및 설정
!apt-get update -qq
!apt-get install fonts-nanum -qq
!fc-cache -fv
!rm ~/.cache/matplotlib -rf

!pip install streamlit pandas matplotlib localtunnel

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import matplotlib.pyplot as plt
# import sqlite3
# import matplotlib.font_manager as fm
# 
# font_path = '/usr/share/fonts/truetype/nanum/NanumGothic.ttf'
# fontprop = fm.FontProperties(fname=font_path, size=10)
# plt.rcParams['font.family'] = 'NanumGothic'
# plt.rcParams['axes.unicode_minus'] = False
# 
# # 기본 설정
# st.set_page_config(page_title="EV vs Charger Trend", layout="wide")
# 
# st.title("📈 전기차 등록 수 vs 충전기 수 추세 그래프")
# 
# # SQLite 메모리 DB 생성
# conn = sqlite3.connect(':memory:')
# 
# # sql.sql 파일 실행
# with open('sql.sql', 'r', encoding='utf-8') as f:
#     sql_script = f.read()
# conn.executescript(sql_script)
# 
# # ev 테이블 집계
# ev_df = pd.read_sql_query('''
#     SELECT year, month, SUM(ev_count) as total_ev
#     FROM ev
#     GROUP BY year, month
# ''', conn)
# 
# # charger 테이블 집계
# charger_df = pd.read_sql_query('''
#     SELECT year, month, SUM(charger_count) as total_charger
#     FROM charger
#     GROUP BY year, month
# ''', conn)
# 
# # date 컬럼 생성
# ev_df['date'] = pd.to_datetime(ev_df['year'].astype(str) + '-' + ev_df['month'].astype(str).str.zfill(2))
# charger_df['date'] = pd.to_datetime(charger_df['year'].astype(str) + '-' + charger_df['month'].astype(str).str.zfill(2))
# 
# # 병합 및 정렬
# merged_df = pd.merge(ev_df[['date', 'total_ev']], charger_df[['date', 'total_charger']], on='date')
# merged_df = merged_df.sort_values('date')
# 
# # Streamlit 그래프 출력
# fig, ax = plt.subplots(figsize=(8, 4))
# ax.plot(merged_df['date'], merged_df['total_ev'], label='EV 등록 수', marker='o')
# ax.plot(merged_df['date'], merged_df['total_charger'], label='충전기 수', marker='s')
# # ax.set_title('전기차 등록 수 및 충전기 수 추세', fontsize=16)
# ax.set_xlabel('날짜', fontsize=12)
# ax.set_ylabel('수량', fontsize=12)
# ax.grid(True)
# ax.legend()
# plt.xticks(rotation=45)
# 
# st.pyplot(fig)
# 
# # # 데이터 확인용
# # with st.expander("📊 데이터 보기"):
# #     renamed_df = merged_df.rename(columns={
# #         'date': '날짜',
# #         'total_ev': '전기차 등록 수',
# #         'total_charger': '충전기 수'
# #     })
# #     st.dataframe(renamed_df)
# 
# 
# # # faq
# # # 가상의 데이터베이스 (실제 사용 시 이 부분을 데이터베이스 연결로 대체)
# # database = [
# #     "사과는 빨간색 과일입니다.",
# #     "바나나는 노란색 과일입니다.",
# #     "오렌지는 주황색 과일입니다.",
# #     "포도는 보라색 또는 녹색 과일입니다.",
# #     "키위는 갈색 껍질에 녹색 속을 가진 과일입니다."
# # ]
# 
# # # 검색 함수
# # def search(query):
# #     return [item for item in database if query.lower() in item.lower()]
# 
# # # 제목
# # st.title("과일 검색 앱")
# 
# # # 검색어 입력창
# # query = st.text_input("검색어를 입력하세요:")
# 
# # # 검색 버튼
# # if st.button("검색"):
# #     if query:
# #         results = search(query)
# #         if results:
# #             st.subheader("검색 결과:")
# #             for result in results:
# #                 st.write(result)
# #         else:
# #             st.write("검색 결과가 없습니다.")
# #     else:
# #         st.write("검색어를 입력해주세요.")
#

import streamlit as st

!wget -q -O - ipv4.icanhazip.com

!streamlit run app.py & npx localtunnel --port 8501

# # 크롤링 insert
# !apt-get update
# !apt-get install -y chromium-chromedriver
# !pip install selenium pymysql

# from selenium import webdriver
# from selenium.webdriver.chrome.options import Options
# from selenium.webdriver.common.by import By
# import time
# import pymysql
# import sqlite3

# # SQLite 메모리 DB 생성
# conn = sqlite3.connect(':memory:')

# # sql.sql 파일 실행
# with open('sql.sql', 'r', encoding='utf-8') as f:
#     sql_script = f.read()
# conn.executescript(sql_script)

# options = Options()
# options.add_argument("--headless")
# options.add_argument("--no-sandbox")
# options.add_argument("--disable-dev-shm-usage")

# driver = webdriver.Chrome(options=options)
# driver.get("https://www.kia.com/kr/vehicles/kia-ev/guide/faq")
# time.sleep(3)  # 페이지 로딩 대기

# faq_data = []

# # 카테고리 반복
# category_buttons = driver.find_elements(By.CSS_SELECTOR, "ul.tab_list > li > button")

# for cat_button in category_buttons:
#     category = cat_button.text.strip()
#     cat_button.click()
#     time.sleep(2)  # 카테고리 클릭 후 로딩 대기

#     qna_items = driver.find_elements(By.CSS_SELECTOR, "div.accordion_list > div.item")

#     for item in qna_items:
#         try:
#             # 질문 열기
#             item.click()
#             time.sleep(0.5)

#             question = item.find_element(By.CSS_SELECTOR, "button > strong").text.strip()
#             answer = item.find_element(By.CSS_SELECTOR, "div.panel > div.answer_cont").text.strip()
#             faq_data.append((question, answer, category))
#         except Exception as e:
#             print("Error:", e)
#             continue



# # 데이터 삽입
# insert_sql = "INSERT INTO faq (question, answer, category) VALUES (%s, %s, %s)"
# cursor.executemany(insert_sql, faq_data)

# conn.commit()
# cursor.close()
# conn.close()
# driver.quit()

# print(f"{len(faq_data)}개의 FAQ가 DB에 저장되었습니다.")

# import pandas as pd
# df = pd.DataFrame(faq_data, columns=["질문", "답변", "카테고리"])
# df.head()